<?php

namespace Tests\Feature\Http\Controllers\Management;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\User;
use App\Models\RaceTeam;
use App\Models\Organization;
use App\Traits\FeatureTestTrait;

/**
 * @see \App\Http\Controllers\Management\UserController
 */
class UserControllerTest extends TestCase
{
    use RefreshDatabase, FeatureTestTrait;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $organizations = Organization::factory()->times(3)->create();

        $response = $this->authorized_user(['user-create'])->get(route('management.users.create'));

        $this->assertAuthenticated();
        $response->assertOk();
        $response->assertViewIs('backend.management.users.create');
        $response->assertViewHas('roles');
        $response->assertViewHas('organizations', $organizations);
        $response->assertViewHas('raceTeams');
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $user = User::factory()->create();

        $response = $this->authorized_user(['user-delete'])->delete(route('management.users.destroy', $user));

        $this->assertAuthenticated();
        $response->status(302);
        $response->assertRedirect(route('management.users.index'));
        $response->assertSessionHas('success');
        $this->assertDatabaseMissing('users', $user->toArray());
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $user = User::factory()->create();
        $organizations = Organization::factory()->times(3)->create();
        $raceTeams = RaceTeam::factory()->times(3)->create();

        $response = $this->authorized_user(['user-update'])->get(route('management.users.edit', [$user]));

        $this->assertAuthenticated();
        $response->assertOk();
        $response->assertViewIs('backend.management.users.edit');
        $response->assertViewHas('user', $user);
        $response->assertViewHas('roles');
        $response->assertViewHas('organizations', $organizations);
        $response->assertViewHas('raceTeams', $raceTeams);
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $users = User::factory()->times(3)->create();

        $response = $this->authorized_user(['user-read'])->get(route('management.users.index'));

        $this->assertAuthenticated();
        $response->assertOk();
        $response->assertViewIs('backend.management.users.index');
        $response->assertViewHas('data');
        $response->assertViewHas('organization');
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $user = User::factory()->create();

        $response = $this->authorized_user(['user-read'])->get(route('management.users.show', [$user]));

        $response->assertOk();
        $response->assertViewIs('backend.management.users.show');
        $response->assertViewHas('user', $user);
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('management.users.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('management.users.index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function suspend_user_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->patch(route('management.suspend_user', [$user]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->put(route('management.users.update', [$user]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('management.users.index'));

        // TODO: perform additional assertions
    }

    /**
     * SUSPEND
     * Assert that user cannot suspend a user.
     *
     * @test
     */
    public function test_suspend_user_cannot_be_suspended_by_unauthorized_users()
    {
        $user = User::factory()->create();

        $response = $this->unauthorized_user()->patch(route('management.suspend_user', $user));

        $this->assertAuthenticated();
        $response->assertStatus(403);
        $this->assertDatabaseHas('users', [
            'email' => $user->email,
            'suspended_until' => null,
        ]);
    }

    /**
     * SUSPEND
     * Assert that user can suspend a user.
     *
     * @test
     */
    public function test_suspend_user_can_be_suspended_by_authorized_users()
    {
        $user = User::factory()->create();

        $response = $this->authorized_user(['user-delete'])->patch(route('management.suspend_user', $user), [
            'suspended_until' => '2021-01-01',
        ]);

        $this->assertAuthenticated();
        $response->assertStatus(302);
        $this->assertDatabaseHas('users', [
            'email' => $user->email,
            'suspended_until' => '2021-01-01 00:00:00',
        ]);
    }
}
